16:12:13 完整请求
16:12:13 请求结束
16:12:13 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:12:13 path and query /weibo/index {} 
16:12:13 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
16:12:13 完整请求
16:12:13 请求结束
16:12:13 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:12:13 path and query /static {'file': 'gua.js'} 
16:12:13 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

16:12:13 完整请求
16:12:13 请求结束
16:12:13 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:12:13 path and query /static {'file': 'weibo.js'} 
16:12:13 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var input = e("#id-input-comment")
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:12:15 完整请求
16:12:15 请求结束
16:12:15 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:12:15 path and query /api/weibo/all {} 
16:12:15 kwargs,  {'weibo_id': 1} <class 'dict'>
16:12:15 kwargs,  {'weibo_id': 2} <class 'dict'>
16:12:15 kwargs,  {'weibo_id': 3} <class 'dict'>
16:12:15 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好asas",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  }
]
16:12:19 完整请求
16:12:19 请求结束
16:12:19 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:12:19 path and query /api/comment/add {} {"weibo_id":"1","content":"as"}
16:12:19 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:16:45 完整请求
16:16:45 请求结束
16:16:45 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:16:45 path and query /weibo/index {} 
16:16:45 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
16:16:45 完整请求
16:16:45 请求结束
16:16:45 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:16:45 path and query /static {'file': 'gua.js'} 
16:16:45 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

16:16:45 完整请求
16:16:45 请求结束
16:16:45 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:16:45 path and query /static {'file': 'weibo.js'} 
16:16:45 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var input = e("#id-input-comment")
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:16:47 完整请求
16:16:47 请求结束
16:16:47 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:16:47 path and query /api/weibo/all {} 
16:16:47 kwargs,  {'weibo_id': 1} <class 'dict'>
16:16:47 kwargs,  {'weibo_id': 2} <class 'dict'>
16:16:47 kwargs,  {'weibo_id': 3} <class 'dict'>
16:16:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好asas",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  }
]
16:16:54 完整请求
16:16:54 请求结束
16:16:56 完整请求
16:16:56 请求结束
16:16:56 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:16:56 path and query /api/comment/add {} {"weibo_id":"1","content":"sada"}
16:16:56 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:17:04 完整请求
16:17:04 请求结束
16:21:26 完整请求
16:21:26 请求结束
16:21:26 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:21:26 path and query /api/weibo/edit {'id': '1'} 
16:21:26 kwargs,  {'id': 1} <class 'dict'>
16:21:26 kwargs,  {'weibo_id': 1} <class 'dict'>
16:21:26 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "content": "你好asas",
  "comments": [
    {
      "id": 1,
      "content": "楼主说得对",
      "weibo_id": 1,
      "user_id": 2
    },
    {
      "id": 2,
      "content": "lbvu is right",
      "weibo_id": 1,
      "user_id": 1
    }
  ]
}
16:21:30 完整请求
16:21:30 请求结束
16:21:30 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:21:30 path and query /api/weibo/update {} {"id":"1","content":"你好a"}
16:21:30 kwargs,  {'id': 1} <class 'dict'>
16:21:30 debug 0
16:21:30 kwargs,  {'weibo_id': 1} <class 'dict'>
16:21:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "content": "你好a",
  "comments": [
    {
      "id": 1,
      "content": "楼主说得对",
      "weibo_id": 1,
      "user_id": 2
    },
    {
      "id": 2,
      "content": "lbvu is right",
      "weibo_id": 1,
      "user_id": 1
    }
  ]
}
16:22:18 完整请求
16:22:18 请求结束
16:22:18 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:22:18 path and query /api/comment/add {} {"weibo_id":"1","content":"sadaas"}
16:22:18 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:22:25 完整请求
16:22:25 请求结束
16:23:25 完整请求
16:23:25 请求结束
16:23:25 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:23:25 path and query /api/weibo/add {} {"content":"asasd"}
16:23:25 add_weibo form:  {'content': 'asasd'}
16:23:25 m:  < Weibo
id: (4)
content: (asasd) 
>

16:23:25 kwargs,  {'weibo_id': 4} <class 'dict'>
16:23:25 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 4,\n  "content": "asasd",\n  "comments": []\n}'
16:23:25 kwargs,  {'weibo_id': 4} <class 'dict'>
16:23:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 4,
  "content": "asasd",
  "comments": []
}
16:23:49 完整请求
16:23:49 请求结束
16:23:49 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:23:49 path and query /weibo/index {} 
16:23:50 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
16:23:50 完整请求
16:23:50 请求结束
16:23:50 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:23:50 path and query /static {'file': 'gua.js'} 
16:23:50 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

16:23:50 完整请求
16:23:50 请求结束
16:23:50 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:23:50 path and query /static {'file': 'weibo.js'} 
16:23:50 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var input = e("#id-input-comment")
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:23:51 完整请求
16:23:51 请求结束
16:23:51 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:23:51 path and query /api/weibo/all {} 
16:23:51 kwargs,  {'weibo_id': 1} <class 'dict'>
16:23:51 kwargs,  {'weibo_id': 2} <class 'dict'>
16:23:51 kwargs,  {'weibo_id': 3} <class 'dict'>
16:23:51 kwargs,  {'weibo_id': 4} <class 'dict'>
16:23:51 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": []
  }
]
16:23:55 完整请求
16:23:55 请求结束
16:24:03 完整请求
16:24:03 请求结束
16:24:03 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:24:03 path and query /api/comment/add {} {"weibo_id":"1","content":"aaa"}
16:24:03 add_comnent form:  {'weibo_id': '1', 'content': 'aaa'}
16:24:03 m:  < Comment
id: (9)
content: (aaa)
weibo_id: (1) 
>

16:24:03 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 9,\n  "content": "aaa",\n  "weibo_id": 1\n}'
16:24:03 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 9,
  "content": "aaa",
  "weibo_id": 1
}
16:24:05 完整请求
16:24:05 请求结束
16:26:47 完整请求
16:26:47 请求结束
16:26:47 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:26:47 path and query /weibo/index {} 
16:26:47 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
16:26:47 完整请求
16:26:47 请求结束
16:26:47 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:26:47 path and query /static {'file': 'gua.js'} 
16:26:47 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

16:26:47 完整请求
16:26:47 请求结束
16:26:47 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:26:47 path and query /static {'file': 'weibo.js'} 
16:26:47 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var input = e("#id-input-comment")
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            // log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                var selector = '#weibo-' + comment.id
                var CommentCell = e(selector)
                log('CommentCell: ', CommentCell)
                // var WeiboContent = CommentCell.querySelector('.Weibo-content')
                // var input = WeiboContent.querySelector('#id-content')
                // var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                // var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                // input.value = update.value
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:26:50 完整请求
16:26:50 请求结束
16:26:50 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:26:50 path and query /api/weibo/all {} 
16:26:50 kwargs,  {'weibo_id': 1} <class 'dict'>
16:26:50 kwargs,  {'weibo_id': 2} <class 'dict'>
16:26:50 kwargs,  {'weibo_id': 3} <class 'dict'>
16:26:50 kwargs,  {'weibo_id': 4} <class 'dict'>
16:26:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": []
  }
]
16:26:51 完整请求
16:26:51 请求结束
16:26:56 完整请求
16:26:56 请求结束
16:26:56 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:26:56 path and query /api/comment/add {} {"weibo_id":"1","content":"asa"}
16:26:56 add_comnent form:  {'weibo_id': '1', 'content': 'asa'}
16:26:56 m:  < Comment
id: (10)
content: (asa)
weibo_id: (1) 
>

16:26:56 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 10,\n  "content": "asa",\n  "weibo_id": 1\n}'
16:26:56 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 10,
  "content": "asa",
  "weibo_id": 1
}
16:27:01 完整请求
16:27:01 请求结束
16:27:41 完整请求
16:27:41 请求结束
16:27:41 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:27:41 path and query /weibo/index {} 
16:27:41 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
16:27:41 完整请求
16:27:41 请求结束
16:27:41 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:27:41 path and query /static {'file': 'gua.js'} 
16:27:41 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

16:27:42 完整请求
16:27:42 请求结束
16:27:42 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:27:42 path and query /static {'file': 'weibo.js'} 
16:27:42 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var input = e("#id-input-comment")
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            // log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                var selector = '#weibo-' + comment.weibo_id
                var CommentCell = e(selector)
                log('CommentCell: ', CommentCell)
                // var WeiboContent = CommentCell.querySelector('.Weibo-content')
                // var input = WeiboContent.querySelector('#id-content')
                // var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                // var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                // input.value = update.value
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:27:43 完整请求
16:27:43 请求结束
16:27:43 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:27:43 path and query /api/weibo/all {} 
16:27:43 kwargs,  {'weibo_id': 1} <class 'dict'>
16:27:43 kwargs,  {'weibo_id': 2} <class 'dict'>
16:27:43 kwargs,  {'weibo_id': 3} <class 'dict'>
16:27:43 kwargs,  {'weibo_id': 4} <class 'dict'>
16:27:43 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "asa",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": []
  }
]
16:27:52 完整请求
16:27:52 请求结束
16:27:52 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:27:52 path and query /api/comment/add {} {"weibo_id":"1","content":"hah"}
16:27:52 add_comnent form:  {'weibo_id': '1', 'content': 'hah'}
16:27:52 m:  < Comment
id: (11)
content: (hah)
weibo_id: (1) 
>

16:27:52 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 11,\n  "content": "hah",\n  "weibo_id": 1\n}'
16:27:52 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 11,
  "content": "hah",
  "weibo_id": 1
}
16:30:39 完整请求
16:30:39 请求结束
16:30:39 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:30:39 path and query /weibo/index {} 
16:30:39 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
16:30:39 完整请求
16:30:39 请求结束
16:30:39 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:30:39 path and query /static {'file': 'gua.js'} 
16:30:40 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

16:30:40 完整请求
16:30:40 请求结束
16:30:40 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:30:40 path and query /static {'file': 'weibo.js'} 
16:30:40 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var input = e("#id-input-comment")
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            // log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                var selector = '#weibo-' + comment.weibo_id
                var weiboCell = e(selector)
                log('weiboCell: ', weiboCell)
                var commentForm = weiboCell.querySelector('.comment-form')
                var input = commentForm.querySelector('#id-input-comment')
                log('apiCommentAdd input.value :', input.value)
                // var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                // var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                // input.value = update.value
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:30:42 完整请求
16:30:42 请求结束
16:30:42 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:30:42 path and query /api/weibo/all {} 
16:30:42 kwargs,  {'weibo_id': 1} <class 'dict'>
16:30:42 kwargs,  {'weibo_id': 2} <class 'dict'>
16:30:42 kwargs,  {'weibo_id': 3} <class 'dict'>
16:30:42 kwargs,  {'weibo_id': 4} <class 'dict'>
16:30:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "hah",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": []
  }
]
16:30:46 完整请求
16:30:46 请求结束
16:30:46 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:30:46 path and query /api/comment/add {} {"weibo_id":"1","content":"sda"}
16:30:46 add_comnent form:  {'weibo_id': '1', 'content': 'sda'}
16:30:46 m:  < Comment
id: (12)
content: (sda)
weibo_id: (1) 
>

16:30:46 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 12,\n  "content": "sda",\n  "weibo_id": 1\n}'
16:30:46 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 12,
  "content": "sda",
  "weibo_id": 1
}
16:35:56 完整请求
16:35:56 请求结束
16:35:56 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:35:56 path and query /weibo/index {} 
16:35:56 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
16:35:56 完整请求
16:35:56 请求结束
16:35:56 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:35:56 path and query /static {'file': 'gua.js'} 
16:35:56 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

16:35:56 完整请求
16:35:56 请求结束
16:35:56 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:35:56 path and query /static {'file': 'weibo.js'} 
16:35:56 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var input = e("#id-input-comment")
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            // log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                var selector = '#weibo-' + comment.weibo_id
                var weiboCell = e(selector)
                log('weiboCell: ', weiboCell)
                var commentForm = weiboCell.querySelector('.comment-form')
                var input = commentForm.querySelector('#id-input-comment')
                log('apiCommentAdd input.value :', input.value)
                html = '<div>input.value</div>'
                commentForm.insertAdjacentHTML('beforeend', html)
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:35:59 完整请求
16:35:59 请求结束
16:35:59 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:35:59 path and query /api/weibo/all {} 
16:35:59 kwargs,  {'weibo_id': 1} <class 'dict'>
16:35:59 kwargs,  {'weibo_id': 2} <class 'dict'>
16:35:59 kwargs,  {'weibo_id': 3} <class 'dict'>
16:35:59 kwargs,  {'weibo_id': 4} <class 'dict'>
16:35:59 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "hah",
        "weibo_id": 1
      },
      {
        "id": 12,
        "content": "sda",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": []
  }
]
16:36:04 完整请求
16:36:04 请求结束
16:36:04 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:36:04 path and query /api/comment/add {} {"weibo_id":"1","content":"hell"}
16:36:04 add_comnent form:  {'weibo_id': '1', 'content': 'hell'}
16:36:04 m:  < Comment
id: (13)
content: (hell)
weibo_id: (1) 
>

16:36:04 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 13,\n  "content": "hell",\n  "weibo_id": 1\n}'
16:36:04 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 13,
  "content": "hell",
  "weibo_id": 1
}
16:37:15 完整请求
16:37:15 请求结束
16:37:15 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:37:15 path and query /weibo/index {} 
16:37:15 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
16:37:15 完整请求
16:37:15 请求结束
16:37:15 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:37:15 path and query /static {'file': 'gua.js'} 
16:37:15 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

16:37:15 完整请求
16:37:15 请求结束
16:37:15 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:37:15 path and query /static {'file': 'weibo.js'} 
16:37:15 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var input = e("#id-input-comment")
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            // log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                var selector = '#weibo-' + comment.weibo_id
                var weiboCell = e(selector)
                log('weiboCell: ', weiboCell)
                var commentForm = weiboCell.querySelector('.comment-form')
                var input = commentForm.querySelector('#id-input-comment')
                log('apiCommentAdd input.value :', input.value)
                html = '<div>${input.value}</div>'
                commentForm.insertAdjacentHTML('afterbegin', html)
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:37:16 完整请求
16:37:16 请求结束
16:37:16 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:37:16 path and query /api/weibo/all {} 
16:37:16 kwargs,  {'weibo_id': 1} <class 'dict'>
16:37:16 kwargs,  {'weibo_id': 2} <class 'dict'>
16:37:16 kwargs,  {'weibo_id': 3} <class 'dict'>
16:37:16 kwargs,  {'weibo_id': 4} <class 'dict'>
16:37:16 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "hah",
        "weibo_id": 1
      },
      {
        "id": 12,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 13,
        "content": "hell",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": []
  }
]
16:37:21 完整请求
16:37:21 请求结束
16:37:21 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:37:21 path and query /api/comment/add {} {"weibo_id":"1","content":"fgfd"}
16:37:21 add_comnent form:  {'weibo_id': '1', 'content': 'fgfd'}
16:37:21 m:  < Comment
id: (14)
content: (fgfd)
weibo_id: (1) 
>

16:37:21 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 14,\n  "content": "fgfd",\n  "weibo_id": 1\n}'
16:37:21 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 14,
  "content": "fgfd",
  "weibo_id": 1
}
16:38:27 完整请求
16:38:27 请求结束
16:38:27 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:38:27 path and query /weibo/index {} 
16:38:27 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
16:38:27 完整请求
16:38:27 请求结束
16:38:27 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:38:27 path and query /static {'file': 'gua.js'} 
16:38:27 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

16:38:27 完整请求
16:38:27 请求结束
16:38:27 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:38:27 path and query /static {'file': 'weibo.js'} 
16:38:27 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var input = e("#id-input-comment")
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            // log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                var selector = '#weibo-' + comment.weibo_id
                var weiboCell = e(selector)
                log('weiboCell: ', weiboCell)
                var commentForm = weiboCell.querySelector('.comment-form')
                var input = commentForm.querySelector('#id-input-comment')
                log('apiCommentAdd input.value :', input.value)
                var html = '<div>${input.value}</div>'
                commentForm.insertAdjacentHTML('afterbegin', html)
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:38:29 完整请求
16:38:29 请求结束
16:38:29 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:38:29 path and query /api/weibo/all {} 
16:38:29 kwargs,  {'weibo_id': 1} <class 'dict'>
16:38:29 kwargs,  {'weibo_id': 2} <class 'dict'>
16:38:29 kwargs,  {'weibo_id': 3} <class 'dict'>
16:38:29 kwargs,  {'weibo_id': 4} <class 'dict'>
16:38:29 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "hah",
        "weibo_id": 1
      },
      {
        "id": 12,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 13,
        "content": "hell",
        "weibo_id": 1
      },
      {
        "id": 14,
        "content": "fgfd",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": []
  }
]
16:38:31 完整请求
16:38:31 请求结束
16:38:31 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:38:31 path and query /api/comment/add {} {"weibo_id":"1","content":"asa"}
16:38:31 add_comnent form:  {'weibo_id': '1', 'content': 'asa'}
16:38:31 m:  < Comment
id: (15)
content: (asa)
weibo_id: (1) 
>

16:38:31 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 15,\n  "content": "asa",\n  "weibo_id": 1\n}'
16:38:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 15,
  "content": "asa",
  "weibo_id": 1
}
16:39:05 完整请求
16:39:05 请求结束
16:39:05 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:39:05 path and query /weibo/index {} 
16:39:05 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
16:39:05 完整请求
16:39:05 请求结束
16:39:05 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:39:05 path and query /static {'file': 'gua.js'} 
16:39:05 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

16:39:05 完整请求
16:39:05 请求结束
16:39:05 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:39:05 path and query /static {'file': 'weibo.js'} 
16:39:05 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var input = e("#id-input-comment")
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            // log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                var selector = '#weibo-' + comment.weibo_id
                var weiboCell = e(selector)
                log('weiboCell: ', weiboCell)
                var commentForm = weiboCell.querySelector('.comment-form')
                var input = commentForm.querySelector('#id-input-comment')
                log('apiCommentAdd input.value :', input.value)
                var content = input.value
                var html = '<div>${content}</div>'
                commentForm.insertAdjacentHTML('afterbegin', html)
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:39:08 完整请求
16:39:08 请求结束
16:39:08 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:39:08 path and query /api/weibo/all {} 
16:39:08 kwargs,  {'weibo_id': 1} <class 'dict'>
16:39:08 kwargs,  {'weibo_id': 2} <class 'dict'>
16:39:08 kwargs,  {'weibo_id': 3} <class 'dict'>
16:39:08 kwargs,  {'weibo_id': 4} <class 'dict'>
16:39:08 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "hah",
        "weibo_id": 1
      },
      {
        "id": 12,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 13,
        "content": "hell",
        "weibo_id": 1
      },
      {
        "id": 14,
        "content": "fgfd",
        "weibo_id": 1
      },
      {
        "id": 15,
        "content": "asa",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": []
  }
]
16:39:13 完整请求
16:39:13 请求结束
16:39:13 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:39:13 path and query /api/comment/add {} {"weibo_id":"1","content":"sda"}
16:39:13 add_comnent form:  {'weibo_id': '1', 'content': 'sda'}
16:39:13 m:  < Comment
id: (16)
content: (sda)
weibo_id: (1) 
>

16:39:13 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 16,\n  "content": "sda",\n  "weibo_id": 1\n}'
16:39:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 16,
  "content": "sda",
  "weibo_id": 1
}
16:41:20 完整请求
16:41:20 请求结束
16:41:20 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:41:20 path and query /weibo/index {} 
16:41:20 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
16:41:20 完整请求
16:41:20 请求结束
16:41:20 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:41:20 path and query /static {'file': 'gua.js'} 
16:41:20 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

16:41:20 完整请求
16:41:20 请求结束
16:41:20 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:41:20 path and query /static {'file': 'weibo.js'} 
16:41:20 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var input = e("#id-input-comment")
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            // log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                var selector = '#weibo-' + comment.weibo_id
                var weiboCell = e(selector)
                log('weiboCell: ', weiboCell)
                var commentForm = weiboCell.querySelector('.comment-form')
                var input = commentForm.querySelector('#id-input-comment')
                log('apiCommentAdd input.value :', input.value)
                var content = input.value
                var html = '<div>${content}</div>'
                commentForm.insertAdjacentHTML('beginbegin', html)
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:41:22 完整请求
16:41:22 请求结束
16:41:22 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:41:22 path and query /api/weibo/all {} 
16:41:22 kwargs,  {'weibo_id': 1} <class 'dict'>
16:41:22 kwargs,  {'weibo_id': 2} <class 'dict'>
16:41:22 kwargs,  {'weibo_id': 3} <class 'dict'>
16:41:22 kwargs,  {'weibo_id': 4} <class 'dict'>
16:41:22 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "hah",
        "weibo_id": 1
      },
      {
        "id": 12,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 13,
        "content": "hell",
        "weibo_id": 1
      },
      {
        "id": 14,
        "content": "fgfd",
        "weibo_id": 1
      },
      {
        "id": 15,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 16,
        "content": "sda",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": []
  }
]
16:41:30 完整请求
16:41:30 请求结束
16:41:30 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:41:30 path and query /api/comment/add {} {"weibo_id":"2","content":""}
16:41:30 add_comnent form:  {'weibo_id': '2', 'content': ''}
16:41:30 m:  < Comment
id: (17)
content: ()
weibo_id: (2) 
>

16:41:30 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 17,\n  "content": "",\n  "weibo_id": 2\n}'
16:41:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 17,
  "content": "",
  "weibo_id": 2
}
16:41:50 完整请求
16:41:50 请求结束
16:41:50 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:41:50 path and query /weibo/index {} 
16:41:50 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
16:41:50 完整请求
16:41:50 请求结束
16:41:50 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:41:50 path and query /static {'file': 'gua.js'} 
16:41:50 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

16:41:50 完整请求
16:41:50 请求结束
16:41:50 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:41:50 path and query /static {'file': 'weibo.js'} 
16:41:50 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var input = e("#id-input-comment")
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            // log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                var selector = '#weibo-' + comment.weibo_id
                var weiboCell = e(selector)
                log('weiboCell: ', weiboCell)
                var commentForm = weiboCell.querySelector('.comment-form')
                var input = commentForm.querySelector('#id-input-comment')
                log('apiCommentAdd input.value :', input.value)
                var content = input.value
                var html = '<div>${content}</div>'
                commentForm.insertAdjacentHTML('beforeBegin', html)
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:41:52 完整请求
16:41:52 请求结束
16:41:52 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:41:52 path and query /api/weibo/all {} 
16:41:52 kwargs,  {'weibo_id': 1} <class 'dict'>
16:41:52 kwargs,  {'weibo_id': 2} <class 'dict'>
16:41:52 kwargs,  {'weibo_id': 3} <class 'dict'>
16:41:52 kwargs,  {'weibo_id': 4} <class 'dict'>
16:41:52 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "hah",
        "weibo_id": 1
      },
      {
        "id": 12,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 13,
        "content": "hell",
        "weibo_id": 1
      },
      {
        "id": 14,
        "content": "fgfd",
        "weibo_id": 1
      },
      {
        "id": 15,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 16,
        "content": "sda",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 17,
        "content": "",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": []
  }
]
16:42:00 完整请求
16:42:00 请求结束
16:42:00 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:42:00 path and query /api/comment/add {} {"weibo_id":"2","content":""}
16:42:00 add_comnent form:  {'weibo_id': '2', 'content': ''}
16:42:00 m:  < Comment
id: (18)
content: ()
weibo_id: (2) 
>

16:42:00 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 18,\n  "content": "",\n  "weibo_id": 2\n}'
16:42:00 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 18,
  "content": "",
  "weibo_id": 2
}
16:42:03 完整请求
16:42:03 请求结束
16:42:03 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:42:03 path and query /weibo/index {} 
16:42:03 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
16:42:03 完整请求
16:42:03 请求结束
16:42:03 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:42:03 path and query /static {'file': 'gua.js'} 
16:42:03 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

16:42:03 完整请求
16:42:03 请求结束
16:42:03 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:42:03 path and query /static {'file': 'weibo.js'} 
16:42:03 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var input = e("#id-input-comment")
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            // log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                var selector = '#weibo-' + comment.weibo_id
                var weiboCell = e(selector)
                log('weiboCell: ', weiboCell)
                var commentForm = weiboCell.querySelector('.comment-form')
                var input = commentForm.querySelector('#id-input-comment')
                log('apiCommentAdd input.value :', input.value)
                var content = input.value
                var html = '<div>${content}</div>'
                commentForm.insertAdjacentHTML('beforeBegin', html)
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:42:05 完整请求
16:42:05 请求结束
16:42:05 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:42:05 path and query /api/weibo/all {} 
16:42:05 kwargs,  {'weibo_id': 1} <class 'dict'>
16:42:05 kwargs,  {'weibo_id': 2} <class 'dict'>
16:42:05 kwargs,  {'weibo_id': 3} <class 'dict'>
16:42:05 kwargs,  {'weibo_id': 4} <class 'dict'>
16:42:05 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "hah",
        "weibo_id": 1
      },
      {
        "id": 12,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 13,
        "content": "hell",
        "weibo_id": 1
      },
      {
        "id": 14,
        "content": "fgfd",
        "weibo_id": 1
      },
      {
        "id": 15,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 16,
        "content": "sda",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 17,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 18,
        "content": "",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": []
  }
]
16:42:12 完整请求
16:42:12 请求结束
16:42:12 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:42:12 path and query /api/comment/add {} {"weibo_id":"2","content":""}
16:42:12 add_comnent form:  {'weibo_id': '2', 'content': ''}
16:42:12 m:  < Comment
id: (19)
content: ()
weibo_id: (2) 
>

16:42:12 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 19,\n  "content": "",\n  "weibo_id": 2\n}'
16:42:12 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 19,
  "content": "",
  "weibo_id": 2
}
16:42:16 完整请求
16:42:16 请求结束
16:42:16 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:42:16 path and query /weibo/index {} 
16:42:16 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
16:42:16 完整请求
16:42:16 请求结束
16:42:17 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:42:17 path and query /static {'file': 'gua.js'} 
16:42:17 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

16:42:17 完整请求
16:42:17 请求结束
16:42:17 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:42:17 path and query /static {'file': 'weibo.js'} 
16:42:17 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var input = e("#id-input-comment")
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            // log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                var selector = '#weibo-' + comment.weibo_id
                var weiboCell = e(selector)
                log('weiboCell: ', weiboCell)
                var commentForm = weiboCell.querySelector('.comment-form')
                var input = commentForm.querySelector('#id-input-comment')
                log('apiCommentAdd input.value :', input.value)
                var content = input.value
                var html = '<div>${content}</div>'
                commentForm.insertAdjacentHTML('beforeBegin', html)
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:42:18 完整请求
16:42:18 请求结束
16:42:18 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:42:18 path and query /api/weibo/all {} 
16:42:18 kwargs,  {'weibo_id': 1} <class 'dict'>
16:42:18 kwargs,  {'weibo_id': 2} <class 'dict'>
16:42:18 kwargs,  {'weibo_id': 3} <class 'dict'>
16:42:18 kwargs,  {'weibo_id': 4} <class 'dict'>
16:42:18 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "hah",
        "weibo_id": 1
      },
      {
        "id": 12,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 13,
        "content": "hell",
        "weibo_id": 1
      },
      {
        "id": 14,
        "content": "fgfd",
        "weibo_id": 1
      },
      {
        "id": 15,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 16,
        "content": "sda",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 17,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 18,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 19,
        "content": "",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": []
  }
]
16:42:23 完整请求
16:42:23 请求结束
16:42:23 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:42:23 path and query /api/comment/add {} {"weibo_id":"1","content":"er"}
16:42:23 add_comnent form:  {'weibo_id': '1', 'content': 'er'}
16:42:23 m:  < Comment
id: (20)
content: (er)
weibo_id: (1) 
>

16:42:23 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 20,\n  "content": "er",\n  "weibo_id": 1\n}'
16:42:23 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 20,
  "content": "er",
  "weibo_id": 1
}
16:42:25 完整请求
16:42:25 请求结束
16:42:25 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:42:25 path and query /weibo/index {} 
16:42:25 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
16:42:25 完整请求
16:42:25 请求结束
16:42:25 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:42:25 path and query /static {'file': 'gua.js'} 
16:42:25 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

16:42:26 完整请求
16:42:26 请求结束
16:42:26 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:42:26 path and query /static {'file': 'weibo.js'} 
16:42:26 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var input = e("#id-input-comment")
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            // log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                var selector = '#weibo-' + comment.weibo_id
                var weiboCell = e(selector)
                log('weiboCell: ', weiboCell)
                var commentForm = weiboCell.querySelector('.comment-form')
                var input = commentForm.querySelector('#id-input-comment')
                log('apiCommentAdd input.value :', input.value)
                var content = input.value
                var html = '<div>${content}</div>'
                commentForm.insertAdjacentHTML('beforeBegin', html)
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:42:27 完整请求
16:42:27 请求结束
16:42:27 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:42:27 path and query /api/weibo/all {} 
16:42:27 kwargs,  {'weibo_id': 1} <class 'dict'>
16:42:27 kwargs,  {'weibo_id': 2} <class 'dict'>
16:42:27 kwargs,  {'weibo_id': 3} <class 'dict'>
16:42:27 kwargs,  {'weibo_id': 4} <class 'dict'>
16:42:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "hah",
        "weibo_id": 1
      },
      {
        "id": 12,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 13,
        "content": "hell",
        "weibo_id": 1
      },
      {
        "id": 14,
        "content": "fgfd",
        "weibo_id": 1
      },
      {
        "id": 15,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 16,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 20,
        "content": "er",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 17,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 18,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 19,
        "content": "",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": []
  }
]
16:42:31 完整请求
16:42:31 请求结束
16:42:31 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:42:31 path and query /api/comment/add {} {"weibo_id":"1","content":"w"}
16:42:31 add_comnent form:  {'weibo_id': '1', 'content': 'w'}
16:42:31 m:  < Comment
id: (21)
content: (w)
weibo_id: (1) 
>

16:42:31 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 21,\n  "content": "w",\n  "weibo_id": 1\n}'
16:42:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 21,
  "content": "w",
  "weibo_id": 1
}
16:42:33 完整请求
16:42:33 请求结束
16:42:33 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:42:33 path and query /weibo/index {} 
16:42:33 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
16:42:34 完整请求
16:42:34 请求结束
16:42:34 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:42:34 path and query /static {'file': 'gua.js'} 
16:42:34 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

16:42:34 完整请求
16:42:34 请求结束
16:42:34 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:42:34 path and query /static {'file': 'weibo.js'} 
16:42:34 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var input = e("#id-input-comment")
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            // log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                var selector = '#weibo-' + comment.weibo_id
                var weiboCell = e(selector)
                log('weiboCell: ', weiboCell)
                var commentForm = weiboCell.querySelector('.comment-form')
                var input = commentForm.querySelector('#id-input-comment')
                log('apiCommentAdd input.value :', input.value)
                var content = input.value
                var html = '<div>${content}</div>'
                commentForm.insertAdjacentHTML('beforeBegin', html)
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:42:35 完整请求
16:42:35 请求结束
16:42:35 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:42:35 path and query /api/weibo/all {} 
16:42:35 kwargs,  {'weibo_id': 1} <class 'dict'>
16:42:35 kwargs,  {'weibo_id': 2} <class 'dict'>
16:42:35 kwargs,  {'weibo_id': 3} <class 'dict'>
16:42:35 kwargs,  {'weibo_id': 4} <class 'dict'>
16:42:35 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "hah",
        "weibo_id": 1
      },
      {
        "id": 12,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 13,
        "content": "hell",
        "weibo_id": 1
      },
      {
        "id": 14,
        "content": "fgfd",
        "weibo_id": 1
      },
      {
        "id": 15,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 16,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 20,
        "content": "er",
        "weibo_id": 1
      },
      {
        "id": 21,
        "content": "w",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 17,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 18,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 19,
        "content": "",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": []
  }
]
16:42:46 完整请求
16:42:46 请求结束
16:42:46 完整请求
16:42:46 请求结束
16:42:46 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:42:46 path and query /api/comment/add {} {"weibo_id":"2","content":""}
16:42:46 add_comnent form:  {'weibo_id': '2', 'content': ''}
16:42:46 m:  < Comment
id: (22)
content: ()
weibo_id: (2) 
>

16:42:46 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 22,\n  "content": "",\n  "weibo_id": 2\n}'
16:42:46 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 22,
  "content": "",
  "weibo_id": 2
}
16:42:49 完整请求
16:42:49 请求结束
16:42:49 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:42:49 path and query /weibo/index {} 
16:42:49 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
16:42:49 完整请求
16:42:49 请求结束
16:42:49 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:42:49 path and query /static {'file': 'gua.js'} 
16:42:49 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

16:42:50 完整请求
16:42:50 请求结束
16:42:50 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:42:50 path and query /static {'file': 'weibo.js'} 
16:42:50 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var input = e("#id-input-comment")
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            // log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                var selector = '#weibo-' + comment.weibo_id
                var weiboCell = e(selector)
                log('weiboCell: ', weiboCell)
                var commentForm = weiboCell.querySelector('.comment-form')
                var input = commentForm.querySelector('#id-input-comment')
                log('apiCommentAdd input.value :', input.value)
                var content = input.value
                var html = '<div>${content}</div>'
                commentForm.insertAdjacentHTML('beforeBegin', html)
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:42:51 完整请求
16:42:51 请求结束
16:42:51 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:42:51 path and query /api/weibo/all {} 
16:42:51 kwargs,  {'weibo_id': 1} <class 'dict'>
16:42:51 kwargs,  {'weibo_id': 2} <class 'dict'>
16:42:51 kwargs,  {'weibo_id': 3} <class 'dict'>
16:42:51 kwargs,  {'weibo_id': 4} <class 'dict'>
16:42:51 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "hah",
        "weibo_id": 1
      },
      {
        "id": 12,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 13,
        "content": "hell",
        "weibo_id": 1
      },
      {
        "id": 14,
        "content": "fgfd",
        "weibo_id": 1
      },
      {
        "id": 15,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 16,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 20,
        "content": "er",
        "weibo_id": 1
      },
      {
        "id": 21,
        "content": "w",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 17,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 18,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 19,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 22,
        "content": "",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": []
  }
]
16:42:59 完整请求
16:42:59 请求结束
16:42:59 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:42:59 path and query /api/comment/add {} {"weibo_id":"4","content":""}
16:42:59 add_comnent form:  {'weibo_id': '4', 'content': ''}
16:42:59 m:  < Comment
id: (23)
content: ()
weibo_id: (4) 
>

16:42:59 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 23,\n  "content": "",\n  "weibo_id": 4\n}'
16:42:59 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 23,
  "content": "",
  "weibo_id": 4
}
16:43:11 完整请求
16:43:11 请求结束
16:43:11 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:43:11 path and query /weibo/index {} 
16:43:11 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
16:43:11 完整请求
16:43:11 请求结束
16:43:11 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:43:11 path and query /static {'file': 'gua.js'} 
16:43:11 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

16:43:11 完整请求
16:43:11 请求结束
16:43:11 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:43:11 path and query /static {'file': 'weibo.js'} 
16:43:11 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var input = e("#id-input-comment")
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            // log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                var selector = '#weibo-' + comment.weibo_id
                var weiboCell = e(selector)
                log('weiboCell: ', weiboCell)
                var commentForm = weiboCell.querySelector('.comment-form')
                var input = commentForm.querySelector('#id-input-comment')
                log('apiCommentAdd input.value :', input.value)
                var content = input.value
                var html = '<div>${content}</div>'
                commentForm.insertAdjacentHTML('beforeBegin', html)
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:43:16 完整请求
16:43:16 请求结束
16:43:16 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:43:16 path and query /api/weibo/all {} 
16:43:16 kwargs,  {'weibo_id': 1} <class 'dict'>
16:43:16 kwargs,  {'weibo_id': 2} <class 'dict'>
16:43:16 kwargs,  {'weibo_id': 3} <class 'dict'>
16:43:16 kwargs,  {'weibo_id': 4} <class 'dict'>
16:43:16 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "hah",
        "weibo_id": 1
      },
      {
        "id": 12,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 13,
        "content": "hell",
        "weibo_id": 1
      },
      {
        "id": 14,
        "content": "fgfd",
        "weibo_id": 1
      },
      {
        "id": 15,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 16,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 20,
        "content": "er",
        "weibo_id": 1
      },
      {
        "id": 21,
        "content": "w",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 17,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 18,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 19,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 22,
        "content": "",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": [
      {
        "id": 23,
        "content": "",
        "weibo_id": 4
      }
    ]
  }
]
16:43:23 完整请求
16:43:23 请求结束
16:43:23 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:43:23 path and query /api/comment/add {} {"weibo_id":"2","content":""}
16:43:23 add_comnent form:  {'weibo_id': '2', 'content': ''}
16:43:23 m:  < Comment
id: (24)
content: ()
weibo_id: (2) 
>

16:43:23 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 24,\n  "content": "",\n  "weibo_id": 2\n}'
16:43:23 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 24,
  "content": "",
  "weibo_id": 2
}
16:43:25 完整请求
16:43:25 请求结束
16:43:25 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:43:25 path and query /weibo/index {} 
16:43:25 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
16:43:25 完整请求
16:43:25 请求结束
16:43:25 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:43:25 path and query /static {'file': 'gua.js'} 
16:43:25 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

16:43:25 完整请求
16:43:25 请求结束
16:43:25 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:43:25 path and query /static {'file': 'weibo.js'} 
16:43:25 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var input = e("#id-input-comment")
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            // log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                var selector = '#weibo-' + comment.weibo_id
                var weiboCell = e(selector)
                log('weiboCell: ', weiboCell)
                var commentForm = weiboCell.querySelector('.comment-form')
                var input = commentForm.querySelector('#id-input-comment')
                log('apiCommentAdd input.value :', input.value)
                var content = input.value
                var html = '<div>${content}</div>'
                commentForm.insertAdjacentHTML('beforeBegin', html)
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:43:27 完整请求
16:43:27 请求结束
16:43:27 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:43:27 path and query /api/weibo/all {} 
16:43:27 kwargs,  {'weibo_id': 1} <class 'dict'>
16:43:27 kwargs,  {'weibo_id': 2} <class 'dict'>
16:43:27 kwargs,  {'weibo_id': 3} <class 'dict'>
16:43:27 kwargs,  {'weibo_id': 4} <class 'dict'>
16:43:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "hah",
        "weibo_id": 1
      },
      {
        "id": 12,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 13,
        "content": "hell",
        "weibo_id": 1
      },
      {
        "id": 14,
        "content": "fgfd",
        "weibo_id": 1
      },
      {
        "id": 15,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 16,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 20,
        "content": "er",
        "weibo_id": 1
      },
      {
        "id": 21,
        "content": "w",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 17,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 18,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 19,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 22,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 24,
        "content": "",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": [
      {
        "id": 23,
        "content": "",
        "weibo_id": 4
      }
    ]
  }
]
16:43:44 完整请求
16:43:44 请求结束
16:45:57 完整请求
16:45:57 请求结束
16:45:57 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:45:57 path and query /weibo/index {} 
16:45:57 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
16:45:57 完整请求
16:45:57 请求结束
16:45:57 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:45:57 path and query /static {'file': 'gua.js'} 
16:45:57 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

16:45:57 完整请求
16:45:57 请求结束
16:45:57 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:45:57 path and query /static {'file': 'weibo.js'} 
16:45:57 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var input = e("#id-input-comment")
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            // log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                var selector = '#weibo-' + comment.weibo_id
                var weiboCell = e(selector)
                log('weiboCell: ', weiboCell)
                var commentForm = weiboCell.querySelector('.comment-form')
                var input = commentForm.querySelector('#id-input-comment')
                log('apiCommentAdd input.value :', input.value)
                var content = input.value
                var html = commentsTemplate(comment)
                commentForm.insertAdjacentHTML('beforeBegin', html)
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:45:59 完整请求
16:45:59 请求结束
16:45:59 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:45:59 path and query /api/weibo/all {} 
16:45:59 kwargs,  {'weibo_id': 1} <class 'dict'>
16:45:59 kwargs,  {'weibo_id': 2} <class 'dict'>
16:45:59 kwargs,  {'weibo_id': 3} <class 'dict'>
16:45:59 kwargs,  {'weibo_id': 4} <class 'dict'>
16:45:59 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "hah",
        "weibo_id": 1
      },
      {
        "id": 12,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 13,
        "content": "hell",
        "weibo_id": 1
      },
      {
        "id": 14,
        "content": "fgfd",
        "weibo_id": 1
      },
      {
        "id": 15,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 16,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 20,
        "content": "er",
        "weibo_id": 1
      },
      {
        "id": 21,
        "content": "w",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 17,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 18,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 19,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 22,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 24,
        "content": "",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": [
      {
        "id": 23,
        "content": "",
        "weibo_id": 4
      }
    ]
  }
]
16:46:12 完整请求
16:46:12 请求结束
16:46:15 完整请求
16:46:15 请求结束
16:46:15 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:46:15 path and query /api/comment/add {} {"weibo_id":"2","content":""}
16:46:15 add_comnent form:  {'weibo_id': '2', 'content': ''}
16:46:15 m:  < Comment
id: (25)
content: ()
weibo_id: (2) 
>

16:46:15 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 25,\n  "content": "",\n  "weibo_id": 2\n}'
16:46:15 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 25,
  "content": "",
  "weibo_id": 2
}
16:46:20 完整请求
16:46:20 请求结束
16:46:20 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:46:20 path and query /weibo/index {} 
16:46:20 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
16:46:20 完整请求
16:46:20 请求结束
16:46:20 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:46:20 path and query /static {'file': 'gua.js'} 
16:46:20 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

16:46:20 完整请求
16:46:20 请求结束
16:46:20 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:46:20 path and query /static {'file': 'weibo.js'} 
16:46:20 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var input = e("#id-input-comment")
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            // log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                var selector = '#weibo-' + comment.weibo_id
                var weiboCell = e(selector)
                log('weiboCell: ', weiboCell)
                var commentForm = weiboCell.querySelector('.comment-form')
                var input = commentForm.querySelector('#id-input-comment')
                log('apiCommentAdd input.value :', input.value)
                var content = input.value
                var html = commentsTemplate(comment)
                commentForm.insertAdjacentHTML('beforeBegin', html)
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:46:22 完整请求
16:46:22 请求结束
16:46:22 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:46:22 path and query /api/weibo/all {} 
16:46:22 kwargs,  {'weibo_id': 1} <class 'dict'>
16:46:22 kwargs,  {'weibo_id': 2} <class 'dict'>
16:46:22 kwargs,  {'weibo_id': 3} <class 'dict'>
16:46:22 kwargs,  {'weibo_id': 4} <class 'dict'>
16:46:22 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "hah",
        "weibo_id": 1
      },
      {
        "id": 12,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 13,
        "content": "hell",
        "weibo_id": 1
      },
      {
        "id": 14,
        "content": "fgfd",
        "weibo_id": 1
      },
      {
        "id": 15,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 16,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 20,
        "content": "er",
        "weibo_id": 1
      },
      {
        "id": 21,
        "content": "w",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 17,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 18,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 19,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 22,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 24,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 25,
        "content": "",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": [
      {
        "id": 23,
        "content": "",
        "weibo_id": 4
      }
    ]
  }
]
16:46:34 完整请求
16:46:34 请求结束
16:48:25 完整请求
16:48:25 请求结束
16:48:25 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:48:25 path and query /api/comment/add {} {"weibo_id":"1","content":"哈哈哈哈"}
16:48:25 add_comnent form:  {'weibo_id': '1', 'content': '哈哈哈哈'}
16:48:25 m:  < Comment
id: (26)
content: (哈哈哈哈)
weibo_id: (1) 
>

16:48:25 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 26,\n  "content": "\xe5\x93\x88\xe5\x93\x88\xe5\x93\x88\xe5\x93\x88",\n  "weibo_id": 1\n}'
16:48:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 26,
  "content": "哈哈哈哈",
  "weibo_id": 1
}
16:48:41 完整请求
16:48:41 请求结束
16:49:16 完整请求
16:49:16 请求结束
16:49:16 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:49:16 path and query /api/comment/add {} {"weibo_id":"2","content":"哈哈哈哈"}
16:49:16 add_comnent form:  {'weibo_id': '2', 'content': '哈哈哈哈'}
16:49:16 m:  < Comment
id: (27)
content: (哈哈哈哈)
weibo_id: (2) 
>

16:49:16 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 27,\n  "content": "\xe5\x93\x88\xe5\x93\x88\xe5\x93\x88\xe5\x93\x88",\n  "weibo_id": 2\n}'
16:49:16 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 27,
  "content": "哈哈哈哈",
  "weibo_id": 2
}
16:49:29 完整请求
16:49:29 请求结束
16:49:29 完整请求
16:49:29 请求结束
16:49:29 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:49:29 path and query /api/comment/add {} {"weibo_id":"2","content":"哈哈哈哈"}
16:49:29 add_comnent form:  {'weibo_id': '2', 'content': '哈哈哈哈'}
16:49:29 m:  < Comment
id: (28)
content: (哈哈哈哈)
weibo_id: (2) 
>

16:49:29 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 28,\n  "content": "\xe5\x93\x88\xe5\x93\x88\xe5\x93\x88\xe5\x93\x88",\n  "weibo_id": 2\n}'
16:49:29 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 28,
  "content": "哈哈哈哈",
  "weibo_id": 2
}
16:49:45 完整请求
16:49:45 请求结束
16:56:58 完整请求
16:56:58 请求结束
16:56:58 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:56:58 path and query /weibo/index {} 
16:56:58 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
16:56:58 完整请求
16:56:58 请求结束
16:56:58 完整请求
16:56:58 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:56:58 请求结束
16:56:58 path and query /static {'file': 'gua.js'} 
16:56:58 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:56:58 path and query /static {'file': 'weibo.js'} 
16:56:58 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

16:56:58 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form-${id}" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var input = e("#id-input-comment")
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            // log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                // js 数字可以和直接字符串相加
                var selector = '#weibo-' + comment.weibo_id
                var weiboCell = e(selector)
                log('weiboCell: ', weiboCell)
                selector = '.comment-form-' + comment.weibo_id
                var commentForm = weiboCell.querySelector(selector)
                var input = commentForm.querySelector('#id-input-comment')
                log('apiCommentAdd input.value :', input.value)
                var html = commentsTemplate(comment)
                log('html: ', html)
                commentForm.insertAdjacentHTML('beforeBegin', html)
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:57:01 完整请求
16:57:01 请求结束
16:57:01 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:57:01 path and query /api/weibo/all {} 
16:57:01 kwargs,  {'weibo_id': 1} <class 'dict'>
16:57:01 kwargs,  {'weibo_id': 2} <class 'dict'>
16:57:01 kwargs,  {'weibo_id': 3} <class 'dict'>
16:57:01 kwargs,  {'weibo_id': 4} <class 'dict'>
16:57:01 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "hah",
        "weibo_id": 1
      },
      {
        "id": 12,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 13,
        "content": "hell",
        "weibo_id": 1
      },
      {
        "id": 14,
        "content": "fgfd",
        "weibo_id": 1
      },
      {
        "id": 15,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 16,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 20,
        "content": "er",
        "weibo_id": 1
      },
      {
        "id": 21,
        "content": "w",
        "weibo_id": 1
      },
      {
        "id": 26,
        "content": "哈哈哈哈",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 17,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 18,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 19,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 22,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 24,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 25,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 27,
        "content": "哈哈哈哈",
        "weibo_id": 2
      },
      {
        "id": 28,
        "content": "哈哈哈哈",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": [
      {
        "id": 23,
        "content": "",
        "weibo_id": 4
      }
    ]
  }
]
16:57:16 完整请求
16:57:16 请求结束
16:57:16 完整请求
16:57:16 请求结束
16:57:16 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:57:16 path and query /api/comment/add {} {"weibo_id":"2","content":""}
16:57:16 add_comnent form:  {'weibo_id': '2', 'content': ''}
16:57:16 m:  < Comment
id: (29)
content: ()
weibo_id: (2) 
>

16:57:16 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 29,\n  "content": "",\n  "weibo_id": 2\n}'
16:57:16 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 29,
  "content": "",
  "weibo_id": 2
}
16:57:32 完整请求
16:57:32 请求结束
16:58:29 完整请求
16:58:29 请求结束
16:58:29 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:58:29 path and query /weibo/index {} 
16:58:29 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
16:58:29 完整请求
16:58:29 请求结束
16:58:29 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:58:29 path and query /static {'file': 'gua.js'} 
16:58:29 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

16:58:29 完整请求
16:58:29 请求结束
16:58:29 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:58:29 path and query /static {'file': 'weibo.js'} 
16:58:29 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form-${id}" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment-${id}" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var input = e("#id-input-comment")
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            // log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                // js 数字可以和直接字符串相加
                var selector = '#weibo-' + comment.weibo_id
                var weiboCell = e(selector)
                log('weiboCell: ', weiboCell)
                selector = '.comment-form-' + comment.weibo_id
                var commentForm = weiboCell.querySelector(selector)
                selector = '#id-input-comment' + comment.weibo_id
                var input = commentForm.querySelector(selector)
                log('apiCommentAdd input.value :', input.value)
                var html = commentsTemplate(comment)
                log('html: ', html)
                commentForm.insertAdjacentHTML('beforeBegin', html)
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:58:31 完整请求
16:58:31 请求结束
16:58:31 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:58:31 path and query /api/weibo/all {} 
16:58:31 kwargs,  {'weibo_id': 1} <class 'dict'>
16:58:31 kwargs,  {'weibo_id': 2} <class 'dict'>
16:58:31 kwargs,  {'weibo_id': 3} <class 'dict'>
16:58:31 kwargs,  {'weibo_id': 4} <class 'dict'>
16:58:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "hah",
        "weibo_id": 1
      },
      {
        "id": 12,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 13,
        "content": "hell",
        "weibo_id": 1
      },
      {
        "id": 14,
        "content": "fgfd",
        "weibo_id": 1
      },
      {
        "id": 15,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 16,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 20,
        "content": "er",
        "weibo_id": 1
      },
      {
        "id": 21,
        "content": "w",
        "weibo_id": 1
      },
      {
        "id": 26,
        "content": "哈哈哈哈",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 17,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 18,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 19,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 22,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 24,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 25,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 27,
        "content": "哈哈哈哈",
        "weibo_id": 2
      },
      {
        "id": 28,
        "content": "哈哈哈哈",
        "weibo_id": 2
      },
      {
        "id": 29,
        "content": "",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": [
      {
        "id": 23,
        "content": "",
        "weibo_id": 4
      }
    ]
  }
]
16:58:43 完整请求
16:58:43 请求结束
16:59:17 完整请求
16:59:17 请求结束
16:59:17 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:59:17 path and query /weibo/index {} 
16:59:17 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
16:59:17 完整请求
16:59:17 请求结束
16:59:17 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:59:17 path and query /static {'file': 'gua.js'} 
16:59:17 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

16:59:17 完整请求
16:59:17 请求结束
16:59:17 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:59:17 path and query /static {'file': 'weibo.js'} 
16:59:17 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form-${id}" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment-${id}" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var input = e("#id-input-comment")
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            // log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                // js 数字可以和直接字符串相加
                var selector = '#weibo-' + comment.weibo_id
                var weiboCell = e(selector)
                log('weiboCell: ', weiboCell)
                selector = '.comment-form-' + comment.weibo_id
                var commentForm = weiboCell.querySelector(selector)
                selector = '#id-input-comment-' + comment.weibo_id
                var input = commentForm.querySelector(selector)
                log('apiCommentAdd input.value :', input.value)
                var html = commentsTemplate(comment)
                log('html: ', html)
                commentForm.insertAdjacentHTML('beforeBegin', html)
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:59:19 完整请求
16:59:19 请求结束
16:59:19 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
16:59:19 path and query /api/weibo/all {} 
16:59:19 kwargs,  {'weibo_id': 1} <class 'dict'>
16:59:19 kwargs,  {'weibo_id': 2} <class 'dict'>
16:59:19 kwargs,  {'weibo_id': 3} <class 'dict'>
16:59:19 kwargs,  {'weibo_id': 4} <class 'dict'>
16:59:19 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "hah",
        "weibo_id": 1
      },
      {
        "id": 12,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 13,
        "content": "hell",
        "weibo_id": 1
      },
      {
        "id": 14,
        "content": "fgfd",
        "weibo_id": 1
      },
      {
        "id": 15,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 16,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 20,
        "content": "er",
        "weibo_id": 1
      },
      {
        "id": 21,
        "content": "w",
        "weibo_id": 1
      },
      {
        "id": 26,
        "content": "哈哈哈哈",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 17,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 18,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 19,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 22,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 24,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 25,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 27,
        "content": "哈哈哈哈",
        "weibo_id": 2
      },
      {
        "id": 28,
        "content": "哈哈哈哈",
        "weibo_id": 2
      },
      {
        "id": 29,
        "content": "",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": [
      {
        "id": 23,
        "content": "",
        "weibo_id": 4
      }
    ]
  }
]
16:59:33 完整请求
16:59:33 请求结束
17:09:17 完整请求
17:09:17 请求结束
17:09:17 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
17:09:17 path and query /weibo/index {} 
17:09:17 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
17:09:17 完整请求
17:09:17 请求结束
17:09:17 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
17:09:17 path and query /static {'file': 'gua.js'} 
17:09:17 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

17:09:17 完整请求
17:09:17 请求结束
17:09:17 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
17:09:17 path and query /static {'file': 'weibo.js'} 
17:09:17 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form-${id}" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment-${id}" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var input = e("#id-input-comment")
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            // log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                // js 数字可以和直接字符串相加
                var selector = '#weibo-' + comment.weibo_id
                var weiboCell = e(selector)
                log('weiboCell: ', weiboCell)
                selector = '.comment-form-' + comment.weibo_id
                var commentForm = weiboCell.querySelector(selector)
                selector = '#id-input-comment-' + comment.weibo_id
                var input = commentForm.querySelector(selector)
                log('apiCommentAdd input :', input)
                log('apiCommentAdd input.value :', input.value)
                var html = commentsTemplate(comment)
                log('html: ', html)
                commentForm.insertAdjacentHTML('beforeBegin', html)
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:09:20 完整请求
17:09:20 请求结束
17:09:20 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
17:09:20 path and query /api/weibo/all {} 
17:09:20 kwargs,  {'weibo_id': 1} <class 'dict'>
17:09:20 kwargs,  {'weibo_id': 2} <class 'dict'>
17:09:20 kwargs,  {'weibo_id': 3} <class 'dict'>
17:09:20 kwargs,  {'weibo_id': 4} <class 'dict'>
17:09:20 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "hah",
        "weibo_id": 1
      },
      {
        "id": 12,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 13,
        "content": "hell",
        "weibo_id": 1
      },
      {
        "id": 14,
        "content": "fgfd",
        "weibo_id": 1
      },
      {
        "id": 15,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 16,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 20,
        "content": "er",
        "weibo_id": 1
      },
      {
        "id": 21,
        "content": "w",
        "weibo_id": 1
      },
      {
        "id": 26,
        "content": "哈哈哈哈",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 17,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 18,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 19,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 22,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 24,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 25,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 27,
        "content": "哈哈哈哈",
        "weibo_id": 2
      },
      {
        "id": 28,
        "content": "哈哈哈哈",
        "weibo_id": 2
      },
      {
        "id": 29,
        "content": "",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": [
      {
        "id": 23,
        "content": "",
        "weibo_id": 4
      }
    ]
  }
]
17:09:34 完整请求
17:09:34 请求结束
17:11:47 完整请求
17:11:47 请求结束
17:11:47 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
17:11:47 path and query /weibo/index {} 
17:11:47 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
17:11:47 完整请求
17:11:47 请求结束
17:11:47 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
17:11:47 path and query /static {'file': 'gua.js'} 
17:11:47 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

17:11:47 完整请求
17:11:47 请求结束
17:11:47 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
17:11:47 path and query /static {'file': 'weibo.js'} 
17:11:47 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form-${id}" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment-${id}" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var selector_id = '#id-input-comment-' + Weibo_id
            var input = e(selector_id)
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            // log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                // js 数字可以和直接字符串相加
                var selector = '#weibo-' + comment.weibo_id
                var weiboCell = e(selector)
                log('weiboCell: ', weiboCell)
                selector = '.comment-form-' + comment.weibo_id
                var commentForm = weiboCell.querySelector(selector)
                selector = '#id-input-comment-' + comment.weibo_id
                var input = commentForm.querySelector(selector)
                log('apiCommentAdd input :', input)
                log('apiCommentAdd input.value :', input.value)
                var html = commentsTemplate(comment)
                log('html: ', html)
                commentForm.insertAdjacentHTML('beforeBegin', html)
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:11:49 完整请求
17:11:49 请求结束
17:11:49 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
17:11:49 path and query /api/weibo/all {} 
17:11:49 kwargs,  {'weibo_id': 1} <class 'dict'>
17:11:49 kwargs,  {'weibo_id': 2} <class 'dict'>
17:11:49 kwargs,  {'weibo_id': 3} <class 'dict'>
17:11:49 kwargs,  {'weibo_id': 4} <class 'dict'>
17:11:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "hah",
        "weibo_id": 1
      },
      {
        "id": 12,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 13,
        "content": "hell",
        "weibo_id": 1
      },
      {
        "id": 14,
        "content": "fgfd",
        "weibo_id": 1
      },
      {
        "id": 15,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 16,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 20,
        "content": "er",
        "weibo_id": 1
      },
      {
        "id": 21,
        "content": "w",
        "weibo_id": 1
      },
      {
        "id": 26,
        "content": "哈哈哈哈",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 17,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 18,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 19,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 22,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 24,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 25,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 27,
        "content": "哈哈哈哈",
        "weibo_id": 2
      },
      {
        "id": 28,
        "content": "哈哈哈哈",
        "weibo_id": 2
      },
      {
        "id": 29,
        "content": "",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": [
      {
        "id": 23,
        "content": "",
        "weibo_id": 4
      }
    ]
  }
]
17:12:02 完整请求
17:12:02 请求结束
17:12:03 完整请求
17:12:03 请求结束
17:12:03 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
17:12:03 path and query /api/comment/add {} {"weibo_id":"3","content":"三生三世"}
17:12:03 add_comnent form:  {'weibo_id': '3', 'content': '三生三世'}
17:12:03 m:  < Comment
id: (30)
content: (三生三世)
weibo_id: (3) 
>

17:12:03 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 30,\n  "content": "\xe4\xb8\x89\xe7\x94\x9f\xe4\xb8\x89\xe4\xb8\x96",\n  "weibo_id": 3\n}'
17:12:03 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 30,
  "content": "三生三世",
  "weibo_id": 3
}
17:12:16 完整请求
17:12:16 请求结束
17:12:29 完整请求
17:12:29 请求结束
17:12:29 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
17:12:29 path and query /weibo/index {} 
17:12:29 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
17:12:29 完整请求
17:12:29 请求结束
17:12:29 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
17:12:29 path and query /static {'file': 'gua.js'} 
17:12:29 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

17:12:29 完整请求
17:12:29 请求结束
17:12:29 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
17:12:29 path and query /static {'file': 'weibo.js'} 
17:12:29 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form-${id}" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment-${id}" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var selector_id = '#id-input-comment-' + Weibo_id
            var input = e(selector_id)
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            // log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                // js 数字可以和直接字符串相加
                var selector = '#weibo-' + comment.weibo_id
                var weiboCell = e(selector)
                log('weiboCell: ', weiboCell)
                selector = '.comment-form-' + comment.weibo_id
                var commentForm = weiboCell.querySelector(selector)
                selector = '#id-input-comment-' + comment.weibo_id
                var input = commentForm.querySelector(selector)
                log('apiCommentAdd input :', input)
                log('apiCommentAdd input.value :', input.value)
                var html = commentsTemplate(comment)
                log('html: ', html)
                commentForm.insertAdjacentHTML('beforeBegin', html)
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:12:30 完整请求
17:12:30 请求结束
17:12:30 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
17:12:30 path and query /api/weibo/all {} 
17:12:30 kwargs,  {'weibo_id': 1} <class 'dict'>
17:12:30 kwargs,  {'weibo_id': 2} <class 'dict'>
17:12:30 kwargs,  {'weibo_id': 3} <class 'dict'>
17:12:30 kwargs,  {'weibo_id': 4} <class 'dict'>
17:12:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "hah",
        "weibo_id": 1
      },
      {
        "id": 12,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 13,
        "content": "hell",
        "weibo_id": 1
      },
      {
        "id": 14,
        "content": "fgfd",
        "weibo_id": 1
      },
      {
        "id": 15,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 16,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 20,
        "content": "er",
        "weibo_id": 1
      },
      {
        "id": 21,
        "content": "w",
        "weibo_id": 1
      },
      {
        "id": 26,
        "content": "哈哈哈哈",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 17,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 18,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 19,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 22,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 24,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 25,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 27,
        "content": "哈哈哈哈",
        "weibo_id": 2
      },
      {
        "id": 28,
        "content": "哈哈哈哈",
        "weibo_id": 2
      },
      {
        "id": 29,
        "content": "",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 30,
        "content": "三生三世",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": [
      {
        "id": 23,
        "content": "",
        "weibo_id": 4
      }
    ]
  }
]
17:12:45 完整请求
17:12:45 请求结束
17:13:34 完整请求
17:13:34 请求结束
17:13:34 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
17:13:34 path and query /api/comment/add {} {"weibo_id":"3","content":"O(∩_∩)O哈哈~"}
17:13:34 add_comnent form:  {'weibo_id': '3', 'content': 'O(∩_∩)O哈哈~'}
17:13:34 m:  < Comment
id: (31)
content: (O(∩_∩)O哈哈~)
weibo_id: (3) 
>

17:13:34 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 31,\n  "content": "O(\xe2\x88\xa9_\xe2\x88\xa9)O\xe5\x93\x88\xe5\x93\x88~",\n  "weibo_id": 3\n}'
17:13:34 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 31,
  "content": "O(∩_∩)O哈哈~",
  "weibo_id": 3
}
17:13:50 完整请求
17:13:50 请求结束
17:15:00 完整请求
17:15:00 请求结束
17:15:00 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
17:15:00 path and query /weibo/index {} 
17:15:00 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
17:15:00 完整请求
17:15:00 请求结束
17:15:00 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
17:15:00 path and query /static {'file': 'gua.js'} 
17:15:00 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

17:15:00 完整请求
17:15:00 请求结束
17:15:00 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
17:15:00 path and query /static {'file': 'weibo.js'} 
17:15:00 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form-${id}" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment-${id}" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var selector_id = '#id-input-comment-' + Weibo_id
            var input = e(selector_id)
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            // log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                // js 数字可以和直接字符串相加
                var selector = '#weibo-' + comment.weibo_id
                var weiboCell = e(selector)
                log('weiboCell: ', weiboCell)
                selector = '.comment-form-' + comment.weibo_id
                var commentForm = weiboCell.querySelector(selector)
                selector = '#id-input-comment-' + comment.weibo_id
                var input = commentForm.querySelector(selector)
                log('apiCommentAdd input.value :', input.value)
                var html =`
                            <div>
                                ${input.value}
                            </div>
                          `
                log('html: ', html)
                commentForm.insertAdjacentHTML('beforeBegin', html)
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:15:02 完整请求
17:15:02 请求结束
17:15:02 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
17:15:02 path and query /api/weibo/all {} 
17:15:02 kwargs,  {'weibo_id': 1} <class 'dict'>
17:15:02 kwargs,  {'weibo_id': 2} <class 'dict'>
17:15:02 kwargs,  {'weibo_id': 3} <class 'dict'>
17:15:02 kwargs,  {'weibo_id': 4} <class 'dict'>
17:15:02 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "hah",
        "weibo_id": 1
      },
      {
        "id": 12,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 13,
        "content": "hell",
        "weibo_id": 1
      },
      {
        "id": 14,
        "content": "fgfd",
        "weibo_id": 1
      },
      {
        "id": 15,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 16,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 20,
        "content": "er",
        "weibo_id": 1
      },
      {
        "id": 21,
        "content": "w",
        "weibo_id": 1
      },
      {
        "id": 26,
        "content": "哈哈哈哈",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 17,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 18,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 19,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 22,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 24,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 25,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 27,
        "content": "哈哈哈哈",
        "weibo_id": 2
      },
      {
        "id": 28,
        "content": "哈哈哈哈",
        "weibo_id": 2
      },
      {
        "id": 29,
        "content": "",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 30,
        "content": "三生三世",
        "weibo_id": 3
      },
      {
        "id": 31,
        "content": "O(∩_∩)O哈哈~",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": [
      {
        "id": 23,
        "content": "",
        "weibo_id": 4
      }
    ]
  }
]
17:15:08 完整请求
17:15:08 请求结束
17:15:08 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
17:15:08 path and query /api/comment/add {} {"weibo_id":"1","content":"阿松"}
17:15:08 add_comnent form:  {'weibo_id': '1', 'content': '阿松'}
17:15:08 m:  < Comment
id: (32)
content: (阿松)
weibo_id: (1) 
>

17:15:08 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 32,\n  "content": "\xe9\x98\xbf\xe6\x9d\xbe",\n  "weibo_id": 1\n}'
17:15:08 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 32,
  "content": "阿松",
  "weibo_id": 1
}
17:19:21 完整请求
17:19:21 请求结束
17:19:21 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
17:19:21 path and query /weibo/index {} 
17:19:21 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
17:19:21 完整请求
17:19:21 请求结束
17:19:21 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
17:19:21 path and query /static {'file': 'gua.js'} 
17:19:21 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

17:19:21 完整请求
17:19:21 请求结束
17:19:21 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
17:19:21 path and query /static {'file': 'weibo.js'} 
17:19:21 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form-${id}" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment-${id}" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var selector_id = '#id-input-comment-' + Weibo_id
            var input = e(selector_id)
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            // log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                // js 数字可以和直接字符串相加
                var selector = '#weibo-' + comment.weibo_id
                var weiboCell = e(selector)
                log('weiboCell: ', weiboCell)
                selector = '.comment-form-' + comment.weibo_id
                var commentForm = weiboCell.querySelector(selector)
                selector = '#id-input-comment-' + comment.weibo_id
                var input = commentForm.querySelector(selector)
                log('apiCommentAdd input.value :', input.value)
                var html =`
                            <div>
                                ${input.value}
                            </div>
                          `
                log('html: ', html)
                selector = '.comment-list'
                var commentList = weiboCell.querySelector(selector)
                commentList.insertAdjacentHTML('afterBegin', html)
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:19:24 完整请求
17:19:24 请求结束
17:19:24 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
17:19:24 path and query /api/weibo/all {} 
17:19:24 kwargs,  {'weibo_id': 1} <class 'dict'>
17:19:24 kwargs,  {'weibo_id': 2} <class 'dict'>
17:19:24 kwargs,  {'weibo_id': 3} <class 'dict'>
17:19:24 kwargs,  {'weibo_id': 4} <class 'dict'>
17:19:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "hah",
        "weibo_id": 1
      },
      {
        "id": 12,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 13,
        "content": "hell",
        "weibo_id": 1
      },
      {
        "id": 14,
        "content": "fgfd",
        "weibo_id": 1
      },
      {
        "id": 15,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 16,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 20,
        "content": "er",
        "weibo_id": 1
      },
      {
        "id": 21,
        "content": "w",
        "weibo_id": 1
      },
      {
        "id": 26,
        "content": "哈哈哈哈",
        "weibo_id": 1
      },
      {
        "id": 32,
        "content": "阿松",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 17,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 18,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 19,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 22,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 24,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 25,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 27,
        "content": "哈哈哈哈",
        "weibo_id": 2
      },
      {
        "id": 28,
        "content": "哈哈哈哈",
        "weibo_id": 2
      },
      {
        "id": 29,
        "content": "",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 30,
        "content": "三生三世",
        "weibo_id": 3
      },
      {
        "id": 31,
        "content": "O(∩_∩)O哈哈~",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": [
      {
        "id": 23,
        "content": "",
        "weibo_id": 4
      }
    ]
  }
]
17:19:32 完整请求
17:19:32 请求结束
17:19:32 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
17:19:32 path and query /api/comment/add {} {"weibo_id":"4","content":"阿萨斯"}
17:19:32 add_comnent form:  {'weibo_id': '4', 'content': '阿萨斯'}
17:19:32 m:  < Comment
id: (33)
content: (阿萨斯)
weibo_id: (4) 
>

17:19:32 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 33,\n  "content": "\xe9\x98\xbf\xe8\x90\xa8\xe6\x96\xaf",\n  "weibo_id": 4\n}'
17:19:32 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 33,
  "content": "阿萨斯",
  "weibo_id": 4
}
17:19:40 完整请求
17:19:40 请求结束
17:19:40 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
17:19:40 path and query /api/comment/add {} {"weibo_id":"4","content":"阿萨斯阿松"}
17:19:40 add_comnent form:  {'weibo_id': '4', 'content': '阿萨斯阿松'}
17:19:40 m:  < Comment
id: (34)
content: (阿萨斯阿松)
weibo_id: (4) 
>

17:19:40 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 34,\n  "content": "\xe9\x98\xbf\xe8\x90\xa8\xe6\x96\xaf\xe9\x98\xbf\xe6\x9d\xbe",\n  "weibo_id": 4\n}'
17:19:40 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 34,
  "content": "阿萨斯阿松",
  "weibo_id": 4
}
17:19:46 完整请求
17:19:46 请求结束
17:19:46 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'user=ewdkks8sjbak3fad']
17:19:46 path and query /api/comment/add {} {"weibo_id":"2","content":"奋斗"}
17:19:46 add_comnent form:  {'weibo_id': '2', 'content': '奋斗'}
17:19:46 m:  < Comment
id: (35)
content: (奋斗)
weibo_id: (2) 
>

17:19:46 add_weibo json_response(m.json()):  b'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\n  "id": 35,\n  "content": "\xe5\xa5\x8b\xe6\x96\x97",\n  "weibo_id": 2\n}'
17:19:46 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 35,
  "content": "奋斗",
  "weibo_id": 2
}
13:50:51 完整请求
13:50:51 请求结束
13:50:51 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjo1fQ.XszVHA.t7bTz3IdB-SW262-NvpS6DYo498']
13:50:51 path and query / {} 
13:50:51 响应
 HTTP/1.1 302 OK
Content-Type: text/html
Location: /todo/index


13:50:51 完整请求
13:50:51 请求结束
13:50:51 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjo1fQ.XszVHA.t7bTz3IdB-SW262-NvpS6DYo498']
13:50:51 path and query /todo/index {} 
13:50:51 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
13:50:52 完整请求
13:50:52 请求结束
13:50:52 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjo1fQ.XszVHA.t7bTz3IdB-SW262-NvpS6DYo498']
13:50:52 path and query /static {'file': 'gua.js'} 
13:50:52 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

13:50:52 完整请求
13:50:52 请求结束
13:50:52 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjo1fQ.XszVHA.t7bTz3IdB-SW262-NvpS6DYo498']
13:50:52 path and query /static {'file': 'todo.js'} 
13:50:52 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    // function(r) 是 callback
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        // 删除的套路
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            log('bindEventTodoDelete todoCell: ', todoCell)
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 编辑这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
13:50:55 完整请求
13:50:55 请求结束
13:50:55 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjo1fQ.XszVHA.t7bTz3IdB-SW262-NvpS6DYo498']
13:50:55 path and query /api/todo/all {} 
13:50:55 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "吃瓜",
    "completed": false,
    "ct": 1589985963,
    "ut": 1589985963
  },
  {
    "id": 2,
    "title": "饭桶",
    "completed": false,
    "ct": 1589985997,
    "ut": 1590044164
  },
  {
    "id": 3,
    "title": "睡觉",
    "completed": false,
    "ct": 1589986207,
    "ut": 1589986207
  }
]
13:51:01 完整请求
13:51:01 请求结束
13:51:01 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjo1fQ.XszVHA.t7bTz3IdB-SW262-NvpS6DYo498']
13:51:01 path and query /favicon.ico {} 
13:51:01 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
13:53:12 完整请求
13:53:12 请求结束
13:53:12 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjo1fQ.XszVHA.t7bTz3IdB-SW262-NvpS6DYo498']
13:53:12 path and query / {} 
13:53:12 响应
 HTTP/1.1 302 OK
Content-Type: text/html
Location: /todo/index


13:53:12 完整请求
13:53:12 请求结束
13:53:12 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjo1fQ.XszVHA.t7bTz3IdB-SW262-NvpS6DYo498']
13:53:12 path and query /todo/index {} 
13:53:12 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
13:53:13 完整请求
13:53:13 请求结束
13:53:13 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjo1fQ.XszVHA.t7bTz3IdB-SW262-NvpS6DYo498']
13:53:13 path and query /static {'file': 'gua.js'} 
13:53:13 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

13:53:13 完整请求
13:53:13 请求结束
13:53:13 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjo1fQ.XszVHA.t7bTz3IdB-SW262-NvpS6DYo498']
13:53:13 path and query /static {'file': 'todo.js'} 
13:53:13 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    // function(r) 是 callback
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        // 删除的套路
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            log('bindEventTodoDelete todoCell: ', todoCell)
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 编辑这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
13:53:14 完整请求
13:53:14 请求结束
13:53:14 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjo1fQ.XszVHA.t7bTz3IdB-SW262-NvpS6DYo498']
13:53:14 path and query /api/todo/all {} 
13:53:14 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "吃瓜",
    "completed": false,
    "ct": 1589985963,
    "ut": 1589985963
  },
  {
    "id": 2,
    "title": "饭桶",
    "completed": false,
    "ct": 1589985997,
    "ut": 1590044164
  },
  {
    "id": 3,
    "title": "睡觉",
    "completed": false,
    "ct": 1589986207,
    "ut": 1589986207
  }
]
13:53:15 完整请求
13:53:15 请求结束
13:56:41 完整请求
13:56:41 请求结束
13:56:41 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjo1fQ.XszVHA.t7bTz3IdB-SW262-NvpS6DYo498']
13:56:41 path and query /weibo/index {} 
13:56:41 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
<!--         gua-auto-list-->
<!--         data-method="get"-->
<!--         data-path="/api/weibo/all"-->
<!--         data-template="xxtemplate"-->

        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>
</body>
</html>
13:56:41 完整请求
13:56:41 请求结束
13:56:41 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjo1fQ.XszVHA.t7bTz3IdB-SW262-NvpS6DYo498']
13:56:41 path and query /static {'file': 'gua.js'} 
13:56:41 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

13:56:41 完整请求
13:56:41 请求结束
13:56:41 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjo1fQ.XszVHA.t7bTz3IdB-SW262-NvpS6DYo498']
13:56:41 path and query /static {'file': 'weibo.js'} 
13:56:42 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}'>
            <div class="Weibo-content" data-id=${id}>
                [WEIBO]: <input id="id-content" value=${content}>
                <br>
                <button class="Weibo-delete">删除微博</button>
                <br>
                <button class="Weibo-edit">更新微博</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form-${id}" data-id=${id}>
                <input type="hidden" name="weibo_id" value="">
                <input id="id-input-comment-${id}" name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(Weibo, cell) {
    var id = Weibo.id
    var content = Weibo.content
    var form = `
        <div class='Weibo-edit-form' data-id=${id}>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterend', form)
    var WeiboCopy = Weibo
    WeiboCopy.content = ''
    var input = cell.querySelector('#id-content')
    input.value = ''
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var loadWeibosByid = function(id, cell) {
    // 调用 ajax api 来载入数据
    apiWeibobyid(id, function(r) {
        // 解析为 数组
        var Weibo = JSON.parse(r)
        insertEditForm(Weibo, cell)
        log('loadWeibosByid Weibo: ', Weibo)
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('form: ', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('bindEventWeiboAdd Weibo.content: ', Weibo.content)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var Weibocontent = self.parentElement
            log('bindEventWeiboDelete WeiboCell', Weibocontent)
            // data-id 就是 .dataset.id
            var Weibo_id = Weibocontent.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                var weibocell = Weibocontent.parentElement
                // 评论也删除了
                weibocell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            var Weibocontent = self.parentElement
            var id = Weibocontent.dataset.id
            loadWeibosByid(id, Weibocontent)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            var editForm = self.parentElement
            log("bindEventWeiboUpdate editForm: ", editForm)
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            // var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = editForm.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log("bindEventWeiboUpdate form: ", form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('WeiboCell: ', WeiboCell)
                var WeiboContent = WeiboCell.querySelector('.Weibo-content')
                var input = WeiboContent.querySelector('#id-content')
                var WeiboEditForm = WeiboCell.querySelector('.Weibo-edit-form')
                var update = WeiboEditForm.querySelector('.Weibo-edit-input')
                input.value = update.value
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            var CommentForm = self.parentElement
            log('bindEventCommentAdd CommentForm', CommentForm)
            var Weibo_id = CommentForm.dataset.id
            log('Weibo_id', Weibo_id)
            var selector_id = '#id-input-comment-' + Weibo_id
            var input = e(selector_id)
            var content = input.value
            var comment = {
                "weibo_id": Weibo_id,
                "content": content,
            }
            // log('bindEventCommentAdd comment ', comment)
            apiCommentAdd(comment, function(r){
                log('添加评论成功', Weibo_id)
                var comment = JSON.parse(r)
                log('comment :', comment)
                // js 数字可以和直接字符串相加
                var selector = '#weibo-' + comment.weibo_id
                var weiboCell = e(selector)
                log('weiboCell: ', weiboCell)
                selector = '.comment-form-' + comment.weibo_id
                var commentForm = weiboCell.querySelector(selector)
                selector = '#id-input-comment-' + comment.weibo_id
                var input = commentForm.querySelector(selector)
                log('apiCommentAdd input.value :', input.value)
                var html =`
                            <div>
                                ${input.value}
                            </div>
                          `
                log('html: ', html)
                selector = '.comment-list'
                var commentList = weiboCell.querySelector(selector)
                commentList.insertAdjacentHTML('afterBegin', html)
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

13:56:43 完整请求
13:56:43 请求结束
13:56:43 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjo1fQ.XszVHA.t7bTz3IdB-SW262-NvpS6DYo498']
13:56:43 path and query /api/weibo/all {} 
13:56:43 kwargs,  {'weibo_id': 1} <class 'dict'>
13:56:44 kwargs,  {'weibo_id': 2} <class 'dict'>
13:56:44 kwargs,  {'weibo_id': 3} <class 'dict'>
13:56:44 kwargs,  {'weibo_id': 4} <class 'dict'>
13:56:44 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "hah",
        "weibo_id": 1
      },
      {
        "id": 12,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 13,
        "content": "hell",
        "weibo_id": 1
      },
      {
        "id": 14,
        "content": "fgfd",
        "weibo_id": 1
      },
      {
        "id": 15,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 16,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 20,
        "content": "er",
        "weibo_id": 1
      },
      {
        "id": 21,
        "content": "w",
        "weibo_id": 1
      },
      {
        "id": 26,
        "content": "哈哈哈哈",
        "weibo_id": 1
      },
      {
        "id": 32,
        "content": "阿松",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 17,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 18,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 19,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 22,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 24,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 25,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 27,
        "content": "哈哈哈哈",
        "weibo_id": 2
      },
      {
        "id": 28,
        "content": "哈哈哈哈",
        "weibo_id": 2
      },
      {
        "id": 29,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 35,
        "content": "奋斗",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 30,
        "content": "三生三世",
        "weibo_id": 3
      },
      {
        "id": 31,
        "content": "O(∩_∩)O哈哈~",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": [
      {
        "id": 23,
        "content": "",
        "weibo_id": 4
      },
      {
        "id": 33,
        "content": "阿萨斯",
        "weibo_id": 4
      },
      {
        "id": 34,
        "content": "阿萨斯阿松",
        "weibo_id": 4
      }
    ]
  }
]
13:56:45 完整请求
13:56:45 请求结束
13:58:28 完整请求
13:58:28 请求结束
13:58:28 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjo1fQ.XszVHA.t7bTz3IdB-SW262-NvpS6DYo498']
13:58:28 path and query /static {} 
13:58:30 完整请求
13:58:30 请求结束
13:58:30 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjo1fQ.XszVHA.t7bTz3IdB-SW262-NvpS6DYo498']
13:58:30 path and query /static {} 
13:58:30 完整请求
13:58:30 请求结束
13:58:30 cookie ['session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjo1fQ.XszVHA.t7bTz3IdB-SW262-NvpS6DYo498']
13:58:30 path and query /static {} 
13:59:21 完整请求
13:59:21 请求结束
13:59:21 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjo1fQ.XszVHA.t7bTz3IdB-SW262-NvpS6DYo498']
13:59:21 path and query /static/ {} 
13:59:21 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
13:59:25 完整请求
13:59:25 请求结束
14:02:27 完整请求
14:02:27 请求结束
14:02:27 cookie ['Pycharm-4dd0b753=41d4755f-1624-45d9-93a5-850ad732b08b', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjo1fQ.XszVHA.t7bTz3IdB-SW262-NvpS6DYo498']
14:02:27 path and query /api/weibo/all {} 
14:02:27 kwargs,  {'weibo_id': 1} <class 'dict'>
14:02:27 kwargs,  {'weibo_id': 2} <class 'dict'>
14:02:27 kwargs,  {'weibo_id': 3} <class 'dict'>
14:02:27 kwargs,  {'weibo_id': 4} <class 'dict'>
14:02:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "你好a",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "aaa",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "hah",
        "weibo_id": 1
      },
      {
        "id": 12,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 13,
        "content": "hell",
        "weibo_id": 1
      },
      {
        "id": 14,
        "content": "fgfd",
        "weibo_id": 1
      },
      {
        "id": 15,
        "content": "asa",
        "weibo_id": 1
      },
      {
        "id": 16,
        "content": "sda",
        "weibo_id": 1
      },
      {
        "id": 20,
        "content": "er",
        "weibo_id": 1
      },
      {
        "id": 21,
        "content": "w",
        "weibo_id": 1
      },
      {
        "id": 26,
        "content": "哈哈哈哈",
        "weibo_id": 1
      },
      {
        "id": 32,
        "content": "阿松",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好asas",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 17,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 18,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 19,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 22,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 24,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 25,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 27,
        "content": "哈哈哈哈",
        "weibo_id": 2
      },
      {
        "id": 28,
        "content": "哈哈哈哈",
        "weibo_id": 2
      },
      {
        "id": 29,
        "content": "",
        "weibo_id": 2
      },
      {
        "id": 35,
        "content": "奋斗",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "2asas",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 30,
        "content": "三生三世",
        "weibo_id": 3
      },
      {
        "id": 31,
        "content": "O(∩_∩)O哈哈~",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 4,
    "content": "asasd",
    "comments": [
      {
        "id": 23,
        "content": "",
        "weibo_id": 4
      },
      {
        "id": 33,
        "content": "阿萨斯",
        "weibo_id": 4
      },
      {
        "id": 34,
        "content": "阿萨斯阿松",
        "weibo_id": 4
      }
    ]
  }
]
14:02:31 完整请求
14:02:31 请求结束
14:02:31 请求结束
14:05:43 完整请求
14:05:43 请求结束
14:05:43 cookie ['']
14:05:43 path and query / {} 
14:05:43 响应
 HTTP/1.1 302 OK
Content-Type: text/html
Location: /todo/index


14:05:43 完整请求
14:05:43 请求结束
14:05:43 cookie ['']
14:05:43 path and query /todo/index {} 
14:05:43 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
14:05:43 完整请求
14:05:43 请求结束
14:05:43 cookie ['']
14:05:43 path and query /static {'file': 'gua.js'} 
14:05:43 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// edit by id
var apiWeibobyid = function(id, callback) {
    var path = '/api/weibo/edit?id=' + id
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

14:05:44 完整请求
14:05:44 请求结束
14:05:44 cookie ['']
14:05:44 path and query /static {'file': 'todo.js'} 
14:05:44 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    // function(r) 是 callback
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        // 删除的套路
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            log('bindEventTodoDelete todoCell: ', todoCell)
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 编辑这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
14:05:44 完整请求
14:05:44 请求结束
14:05:44 cookie ['']
14:05:44 path and query /api/todo/all {} 
14:05:44 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "吃瓜",
    "completed": false,
    "ct": 1589985963,
    "ut": 1589985963
  },
  {
    "id": 2,
    "title": "饭桶",
    "completed": false,
    "ct": 1589985997,
    "ut": 1590044164
  },
  {
    "id": 3,
    "title": "睡觉",
    "completed": false,
    "ct": 1589986207,
    "ut": 1589986207
  }
]
14:05:52 完整请求
14:05:52 请求结束
